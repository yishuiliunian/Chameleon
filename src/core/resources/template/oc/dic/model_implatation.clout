# coding: UTF-8
//
//  ${model.name}.m
//  ${model.name}
//
//  Created by baidu
//  Copyright (c) 2015å¹´ Baidu. All rights reserved.
//
<%
from core.codegen.property import ObjectProperty
from core.codegen.property import FundamentalProperty
from core.codegen.property import CharProperty
from core.codegen.property import UnsignedCharProperty
from core.codegen.property import ShortProperty
from core.codegen.property import UnsignedShortProperty
from core.codegen.property import IntProperty
from core.codegen.property import UnsignedIntProperty
from core.codegen.property import LongProperty
from core.codegen.property import UnsignedLongProperty
from core.codegen.property import LongLongProperty
from core.codegen.property import UnsignedLongLongProperty
from core.codegen.property import FloatProperty
from core.codegen.property import DoubleProperty
from core.codegen.property import NSIntegerProperty
from core.codegen.property import NSUIntegerProperty
from core.codegen.property import Int8Property
from core.codegen.property import Int16Property
from core.codegen.property import Int32Property
from core.codegen.property import Int64Property
from core.codegen.property import UInt8Property
from core.codegen.property import UInt16Property
from core.codegen.property import UInt32Property
from core.codegen.property import UInt64Property
from core.codegen.property import BoolProperty
from core.codegen.property import NSArrayProperty
from core.codegen.property import NSStringProperty
from core.codegen.property import NSDictionaryProperty
from core.codegen.property import NSNumberProperty
from core.codegen.property import NSURLProperty
from core.codegen.property import NSDataProperty
from core.codegen.property import CustomObjectProperty
from core.codegen.property import is_foundation_object_propery
from core.codegen.property import is_oc_object_propery
from core.utilities.constant import ModelType
%>
#import "${model.name}.h"
#import "NSObject+TODictionary.h"
#import "EnsureType.h"
% for o in model.properties:
  % if isinstance(o, CustomObjectProperty):
#import "${o.type}.h"
  % endif
% endfor

@implementation ${model.name}

- (id)toDictionaryValue
{
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    % for p in model.properties:
    % if isinstance(p, CharProperty):
    [dic setObject:[NSNumber numberWithChar:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UnsignedCharProperty):
    [dic setObject:[NSNumber numberWithUnsignedChar:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, ShortProperty):
    [dic setObject:[NSNumber numberWithShort:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UnsignedShortProperty):
    [dic setObject:[NSNumber numberWithUnsignedShort:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, IntProperty):
    [dic setObject:[NSNumber numberWithInt:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UnsignedIntProperty):
    [dic setObject:[NSNumber numberWithUnsignedInt:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, LongProperty):
    [dic setObject:[NSNumber numberWithLong:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UnsignedLongProperty):
    [dic setObject:[NSNumber numberWithUnsignedLong:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, LongLongProperty):
    [dic setObject:[NSNumber numberWithLongLong:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UnsignedLongLongProperty):
    [dic setObject:[NSNumber numberWithUnsignedLongLong:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, FloatProperty):
    [dic setObject:[NSNumber numberWithFloat:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, DoubleProperty):
    [dic setObject:[NSNumber numberWithDouble:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, NSIntegerProperty):
    [dic setObject:[NSNumber numberWithInteger:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, NSUIntegerProperty):
    [dic setObject:[NSNumber numberWithInteger:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, Int8Property):
    [dic setObject:[NSNumber numberWithChar:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UInt8Property):
    [dic setObject:[NSNumber numberWithUnsignedChar:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UInt16Property):
    [dic setObject:[NSNumber numberWithShort:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UInt16Property):
    [dic setObject:[NSNumber numberWithUnsignedShort:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UInt32Property):
    [dic setObject:[NSNumber numberWithInt:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UInt32Property):
    [dic setObject:[NSNumber numberWithUnsignedInt:self.${p.name}] forKey:@"${p.name}"];
    %endif
     % if isinstance(p, UInt64Property):
    [dic setObject:[NSNumber numberWithLongLong:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, UInt64Property):
    [dic setObject:[NSNumber numberWithUnsignedLongLong:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, BoolProperty):
    [dic setObject:[NSNumber numberWithBool:self.${p.name}] forKey:@"${p.name}"];
    %endif
    % if isinstance(p, ObjectProperty):
    % if isinstance(p, NSStringProperty):
    [dic setObject:self.${p.name} forKey:@"${p.name}"];
    % elif isinstance(p, NSNumberProperty):
    [dic setObject:self.${p.name} forKey:@"${p.name}"];
    % elif isinstance(p, NSDataProperty):
    [dic setObject:self.${p.name} forKey:@"${p.name}"];
    % elif isinstance(p, NSURLProperty):
    [dic setObject:self.${p.name} forKey:@"${p.name}"];
    % else:
    [dic setObject:[self.${p.name} toDictionaryValue] forKey:@"${p.name}"];
    %endif
    %endif
    %endfor
    return dic;
}

- (id)toServerDictionaryValue
{
    NSMutableDictionary *dic = [NSMutableDictionary dictionary];
    return dic;
}

- (id)copyWithZone:(NSZone *)zone
{
    ${model.name} *copyedModel = [[self.class allocWithZone:zone] init];
    % for p in model.properties:
    % if isinstance(p, ObjectProperty):
    % if isinstance(p, NSArrayProperty):
    copyedModel.${p.name} = [[NSArray alloc]initWithArray:self.${p.name} copyItems:YES];
    % elif isinstance(p, NSDictionaryProperty):
    copyedModel.${p.name} = [[NSDictionary alloc]initWithDictionary:self.${p.name} copyItems:YES];
    % else:
    copyedModel.${p.name} = self.${p.name}.copy;
    % endif
    % elif isinstance(p, FundamentalProperty):
    copyedModel.${p.name} = self.${p.name};
    % endif
    % endfor
    return copyedModel;
}

- (void)setValue:(id)value forKey:(NSString *)key
{
    if (NO){}
% for p in model.properties:
% if isinstance(p, CharProperty):
    // char
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else: 
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureCharType(value);
    }
% endif
% if isinstance(p, UnsignedCharProperty):
    // unsigned char
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUnsignedCharType(value);
    }
% endif
% if isinstance(p, ShortProperty):
    // short
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureShortType(value);
    }
% endif
% if isinstance(p, UnsignedShortProperty):
    // unsigned short
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUnsignedShortType(value);
    }
% endif
% if isinstance(p, IntProperty):
    // int
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureIntType(value);
    }
% endif
% if isinstance(p, UnsignedIntProperty):
    // unsigned int
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUnsignedIntType(value);
    }
% endif
% if isinstance(p, LongProperty):
    // long
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureLongType(value);
    }
% endif
% if isinstance(p, UnsignedLongProperty):
    // unsigned long
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUnsignedLongType(value);
    }
% endif
% if isinstance(p, LongLongProperty):
    // longlong
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureLongLongType(value);
    }
% endif
% if isinstance(p, UnsignedLongLongProperty):
    // unsigned long long
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUnsignedLongLongType(value);
    }
% endif
% if isinstance(p, Int8Property):
    // int8_t
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureCharType(value);
    }
% endif
% if isinstance(p, UInt8Property):
    // uint8_t
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUnsignedCharType(value);
    }
% endif
% if isinstance(p, Int16Property):
    // int16_t
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureShortType(value);
    }
% endif
% if isinstance(p, UInt16Property):
    // uint16_t
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUnsignedShortType(value);
    }
% endif
% if isinstance(p, Int32Property):
    // int32_t
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureIntType(value);
    }
% endif
% if isinstance(p, UInt32Property):
    // uint32_t
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUnsignedIntType(value);
    }
% endif
% if isinstance(p, Int64Property):
    // int64
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureLongLongType(value);
    }
% endif
% if isinstance(p, UInt64Property):
    // uint64_t
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUnsignedLongLongType(value);
    }
% endif
% if isinstance(p, FloatProperty):
    // float
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureFloatType(value);
    }
% endif
% if isinstance(p, DoubleProperty):
    // double
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureDoubleType(value);
    }
% endif
% if isinstance(p, BoolProperty):
    // BOOL
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureBoolType(value);
    }
% endif
% if isinstance(p, NSIntegerProperty):
    // NSInteger
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureIntegerType(value);
    }
% endif
% if isinstance(p, NSUIntegerProperty):
    // NSUInteger
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureUIntegerType(value);
    }
% endif
% if isinstance(p, NSStringProperty):
    // NSString
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureStringType(value);
     }
% endif
% if isinstance(p, NSNumberProperty):
    // NSNumber
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureNumberType(value);
    }
% endif
% if isinstance(p, NSURLProperty):
    // NSURL
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureURLType(value);
    }
% endif
% if isinstance(p, NSDictionaryProperty):
    // NSDictionary
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureDictionaryType(value);
    }
%endif
% if isinstance(p, NSDataProperty):
    // NSData
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        _${p.name} = ensureDataType(value);
    }
%endif
% if isinstance(p, CustomObjectProperty):
    // èªå®ä¹ç±»å
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        if ((!value) || ([value isKindOfClass:[NSNull class]])) {
            _${p.name} = nil;
            return;
        }
        NSAssert([value isKindOfClass:[NSDictionary class]], @"æ°æ®ä¸æ¯dictionaryç±»åï¼æ æ³åèªå®ä¹ç±»åè½¬å");
        ${p.type}* transObj = [[${p.type} alloc] init];
        [transObj setValuesForKeysWithDictionary:value];
        _${p.name} = transObj;
    }
% endif
% if isinstance(p, NSArrayProperty):
    // NSArray
    %if p.secondName is None:
    else if ([key isEqualToString:@"${p.name}"])
    %else:
    else if ([key isEqualToString:@"${p.name}"] || [key isEqualToString:@"${p.secondName}"])
    %endif
    {
        if (nil == ensureArrayType(value))
        {
            _${p.name} = nil;
            return;
        }
        NSArray* array = (NSArray*)value;
        NSMutableArray* objects = [NSMutableArray new];
        for (id obj in array) { 
            %if is_foundation_object_propery(p.containerType):
            %if p.containerType == ModelType.Number:
            // NSNumberç±»å
            if (ensureNumberType(obj))
            {
                [objects addObject:ensureNumberType(obj)];
            }
            %endif
            % if p.containerType == ModelType.String:
            // NSStringç±»å
            if (ensureStringType(obj))
            {
                [objects addObject:ensureStringType(obj)];
            }
            %endif
            %else:
            // èªå®ä¹ç±»å
            NSAssert([obj isKindOfClass:[NSDictionary class]], @"æ°æ®ä¸æ¯dictionaryç±»åï¼æ æ³åèªå®ä¹ç±»åè½¬å");
            ${p.containerType }* transObj = [[${p.containerType } alloc] init];
            [transObj setValuesForKeysWithDictionary:obj];
            [objects addObject:transObj];
            %endif 
        }
        _${p.name} = objects;
    }
% endif
% endfor
}

@end
