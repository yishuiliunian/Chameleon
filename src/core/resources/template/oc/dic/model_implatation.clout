# coding: UTF-8
<%
from core.codegen.property import ObjectProperty
from core.codegen.property import FundamentalProperty
from core.codegen.property import CharProperty
from core.codegen.property import UnsignedCharProperty
from core.codegen.property import ShortProperty
from core.codegen.property import UnsignedShortProperty
from core.codegen.property import IntProperty
from core.codegen.property import UnsignedIntProperty
from core.codegen.property import LongProperty
from core.codegen.property import UnsignedLongProperty
from core.codegen.property import LongLongProperty
from core.codegen.property import UnsignedLongLongProperty
from core.codegen.property import FloatProperty
from core.codegen.property import DoubleProperty
from core.codegen.property import NSIntegerProperty
from core.codegen.property import NSUIntegerProperty
from core.codegen.property import Int8Property
from core.codegen.property import Int16Property
from core.codegen.property import Int32Property
from core.codegen.property import Int64Property
from core.codegen.property import UInt8Property
from core.codegen.property import UInt16Property
from core.codegen.property import UInt32Property
from core.codegen.property import UInt64Property
from core.codegen.property import BoolProperty
from core.codegen.property import NSArrayProperty
from core.codegen.property import NSStringProperty
from core.codegen.property import NSDictionaryProperty
from core.codegen.property import NSNumberProperty
from core.codegen.property import NSURLProperty
from core.codegen.property import NSDataProperty
from core.codegen.property import CustomObjectProperty
from core.codegen.property import is_foundation_object_propery
from core.utilities.constant import ModelType
%>

#import "${model.name}.h"
#import "EnsureType.h"
% for o in model.properties:
  % if isinstance(o, CustomObjectProperty):
#import "${o.type}.h"
  % endif
% endfor

@implementation ${model.name}

- (void)setValue:(id)value forKey:(NSString *)key
{
    if (NO){}
% for p in model.properties:
% if isinstance(p, CharProperty):
    // char
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureCharType:value];
    }
% endif
% if isinstance(p, UnsignedCharProperty):
    // unsigned char
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUnsignedCharType:value];
    }
% endif
% if isinstance(p, ShortProperty):
    // short
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureShortType:value];
    }
% endif
% if isinstance(p, UnsignedShortProperty):
    // unsigned short
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUnsignedCharType:value];
    }
% endif
% if isinstance(p, IntProperty):
    // int
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureIntType:value];
    }
% endif
% if isinstance(p, UnsignedIntProperty):
    // unsigned int
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUnsignedIntType:value];
    }
% endif
% if isinstance(p, LongProperty):
    // long
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureLongType:value];
    }
% endif
% if isinstance(p, UnsignedLongProperty):
    // unsigned long
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUnsignedLongType:value];
    }
% endif
% if isinstance(p, LongLongProperty):
    // longlong
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureLongLongType:value];
    }
% endif
% if isinstance(p, UnsignedLongLongProperty):
    // unsigned long long
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUnsignedLongLongType:value];
    }
% endif
% if isinstance(p, Int8Property):
    // int8_t
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureCharType:value];
    }
% endif
% if isinstance(p, UInt8Property):
    // uint8_t
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUnsignedCharType:value];
    }
% endif
% if isinstance(p, Int16Property):
    // int16_t
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureShortType:value];
    }
% endif
% if isinstance(p, UInt16Property):
    // uint16_t
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUnsignedShortType:value];
    }
% endif
% if isinstance(p, Int32Property):
    // int32_t
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureIntType:value];
    }
% endif
% if isinstance(p, UInt32Property):
    // uint32_t
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUIntType:value];
    }
% endif
% if isinstance(p, Int64Property):
    // int64
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureLongLongType:value];
    }
% endif
% if isinstance(p, UInt64Property):
    // uint64_t
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUnsignedLongLongType:value];
    }
% endif
% if isinstance(p, FloatProperty):
    // float
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureFloatType:value];
    }
% endif
% if isinstance(p, DoubleProperty):
    // double
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureDoubleType:value];
    }
% endif
% if isinstance(p, BoolProperty):
    // BOOL
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureBoolType:value];
    }
% endif
% if isinstance(p, NSIntegerProperty):
    // NSInteger
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureIntergerType:value];
    }
% endif
% if isinstance(p, NSUIntegerProperty):
    // NSUInteger
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureUIntergerType:value];
    }
% endif
% if isinstance(p, NSStringProperty):
    // NSString
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureStringType:value];
     }
% endif
% if isinstance(p, NSNumberProperty):
    // NSNumber
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureNumberType:value];
    }
% endif
% if isinstance(p, NSDictionaryProperty):
    // NSDictionary
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureDictionaryType:value];
    }
%endif
% if isinstance(p, NSDataProperty):
    // NSDictionary
    else if ([key isEqualToString:@"${p.name}"])
    {
        _${p.name} = [self ensureDataType:value];
    }
%endif
% if isinstance(p, CustomObjectProperty):
    // 自定义类型
    else if ([key isEqualToString:@"${p.name}"])
    {
        if ((!value) || ([value isKindOfClass:[NSNull class]])) {
            return;
        }
        NSAssert([value isKindOfClass:[NSDictionary class]], @"数据不是dictionary类型，无法向自定义类型转化");
        ${p.type}* transObj = [[${p.type} alloc] init];
        [transObj setValuesForKeysWithDictionary:value];
        _${p.name} = transObj;
    }
% endif
% if isinstance(p, NSArrayProperty):
    // NSArray
    else if ([key isEqualToString:@"${p.name}"])
    {
        if ((!value) || ([value isKindOfClass:[NSNull class]])) 
        return;
    }
    NSAssert([value isKindOfClass:[NSArray class]], @"${p.name}从服务器传过来的数据不是NSArray类型，请检查");
    NSArray* array = (NSArray*)value;
    NSMutableArray* objects = [NSMutableArray new];
    for (id obj in array) {
        if ([obj isKindOfClass:[NSNull class]]) {
            return;
        } 
        %if is_foundation_object_propery(p.containerType):
        %if p.containerType == ModelType.Number:
        // NSNumber类型
        if ([self ensureNumberType:obj])
        {
            [objects addObject:[self ensureNumberType:obj]];
        }
        %endif
        % if p.containerType == ModelType.String:
        // NSString类型
        if ([self ensureNumberType:obj])
        {
            [objects addObject:[self ensureStringType:obj]];
        }
        %endif
        %else:
        // 自定义类型
        NSAssert([obj isKindOfClass:[NSDictionary class]], @"数据不是dictionary类型，无法向自定义类型转化");
        ${p.containerType }* transObj = [[${p.containerType } alloc] init];
        [transObj setValuesForKeysWithDictionary:obj];
        [objects addObject:transObj];
        %endif 
    }
    _${p.name} = objects;
  }
% endif
% endfor
}

@end
